function countSheeps(n) {

  if(n > 0) {
  console.log(n + ': Another sheep jumps over the fence';
  countSheeps(n-1);
  } else {
  console.log('All sheep jumped over the fence');
  }

countSheeps(3);



function powerCalculator(x, y) {
  if(y < 0) {
  return console.log('exponent should be >= 0')
  } else {
  return x ** y;
  }
  
  powerCalculator(10, 2);
  
  
function reverseString(str) {
  if (str === "")
    return "";
  else
    return reverseString(str.substr(1)) + str.charAt(0);
}

function tri(n){
  if(n <= 1){
    return n
  } else {
    return n + tri(n-1)
  }
}

function strSplit(str, char) {
  if(str === '' || !str.includes(char)){
    return str;
  } else if (str.charAt(0) === char){
    return strSplit(str.substr(1), char) 
  } else {
    return str.charAt(0) + strSplit(str.substr(1), char);
  }
}
console.log("string split: ", strSplit("02/20/2020", "/"));


FIBONACCI

let fibonacci_series = function (n) 
{
  if (n===1) 
  {
    return [0, 1];
  } 
  else 
  {
    var s = fibonacci_series(n - 1);
    s.push(s[s.length - 1] + s[s.length - 2]);
    return s;
  }
};

 console.log(fibonacci_series(7));
 
 function factorialize(num) {
  if (num < 0) 
        return -1;
  else if (num == 0) 
      return 1;
  else {
      return (num * factorialize(num - 1));
  }
}
factorialize(5);

function mazeSolver(maze, col, row) {
    if (maze[col][row] === 'e') {
        return '';
    }
    if (maze[col][row] === '*') {
        if (col > 0) {
            return mazeSolver(maze, col-1, row);
        }
        if (row > 0) {
            return mazeSolver(maze, col, row-1);
        }

    }
    if (maze[col][row] === ' ') {
        maze[col][row] = '1';
        if (col < maze.length - 1) {
            return 'D' + mazeSolver(maze, col+1, row);
        }
        if (row < maze[col].length - 1) {
            return 'R' + mazeSolver(maze, col, row+1);
        }
        
        
    }
}

function findPerms(str) {
  if (str.length === 1) return [str]
  
  let all = []
  for (let i = 0; i < str.length; i++) {
    const currentLetter = str[i]
    
    const remainingLetters = str.slice(0,i) + str.slice(i+1)
    const permsOfRemainingLetters = findPerms(remainingLetters)
    
    permsOfRemainingLetters.forEach(subPerm => {
      all.push(currentLetter + subPerm)    
    })  
  }
  return all
}


let organization = {
	"Zuckerberg": {		
		"Schroepfer": {
			"Bosworth": {
				"Steve":{},
				"Kyle":{},
				"Andra":{}
			},
			"Zhao": {
				"Richie":{},
				"Sofia":{},
				"Jen":{}
			},
			"Badros": {
				"John":{},
				"Mike":{},
				"Pat":{}
			},
			"Parikh": {
				"Zach":{},
				"Ryan":{},
				"Tes":{}
			}
		},
		"Schrage": {
			"VanDyck": {
				"Sabrina":{},
				"Michelle":{},
				"Josh":{}
			},
			"Swain": {
				"Blanch":{},
				"Tom":{},
				"Joe":{}
			},
			"Frankovsky": {
				"Jasee":{},
				"Brian":{},
				"Margaret":{}
			}
		},
		"Sandberg": {
			"Goler": {
				"Eddie":{},
				"Julie":{},
				"Annie":{}
			},
			"Hernandez": {
				"Rowi":{},
				"Inga":{},
				"Morgan":{}
			},
			"Moissinac": {
				"Amy":{},
				"Chuck":{},
				"Vinni":{}
			},
			"Kelley": {
				"Eric":{},
				"Ana":{},
				"Wes":{}
			}
}}};

function traverseA(data, depth = 0) {
	let indent = " ".repeat(depth * 4);
	Object.keys(data).forEach(key => {
		console.log(indent + key);
		traverseA(data[key], depth + 1)
	});
}

function traverseB(node, indent=0) {
	for (var key in node) {
		console.log(" ".repeat(indent), key);
		traverseB(node[key], indent + 4);
	}
}

function findBinary(n) {
    if (n === 0) {
        return 0;
    } else {
        return (n % 2 + 10 * findBinary(Math.floor(n/2)));
    }
}

  
  
